[{"content":"计算机的芝士零散，有些内容容易忘记，而各种笔记方案皆不尽人意，而构建一个blog网站可以满足各种个性化需求同时满足有时的写作欲望，一个blog网站也足够私人可以更适应书写。所以打算构建一个简单的博客网站来承载这些需求。 而构建一个blog网站的方法多样，应为现有知识和代码能力还有精力尚不足以满足完全搓一个完整的网站，而写作需求又十分紧急，所以组合一下现有的足够简单和舒适的方案来满足需求。\n效果展示 ","date":"2025-04-04","id":0,"permalink":"www.whale4blog.cn/docs/hexo%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/%E5%89%8D%E8%A8%80/","summary":"\u003cp\u003e计算机的芝士零散，有些内容容易忘记，而各种笔记方案皆不尽人意，而构建一个blog网站可以满足各种个性化需求同时满足有时的写作欲望，一个blog网站也足够私人可以更适应书写。所以打算构建一个简单的博客网站来承载这些需求。\n而构建一个blog网站的方法多样，应为现有知识和代码能力还有精力尚不足以满足完全搓一个完整的网站，而写作需求又十分紧急，所以组合一下现有的足够简单和舒适的方案来满足需求。\u003c/p\u003e\n\u003ch2 id=\"效果展示\"\u003e效果展示\u003c/h2\u003e\n\u003cimg src=\"https://cdn.jsdelivr.net/gh/whale4rain/picx-images-hosting@master/20250313/image.7snd6xto8o.png\" alt=\"image\" /\u003e\r\n\u003cimg src=\"https://cdn.jsdelivr.net/gh/whale4rain/picx-images-hosting@master/20250313/image.4n7v7zzijm.webp\" alt=\"image\" /\u003e","tags":[],"title":"前言"},{"content":"GitHub page部署网站 部署blog网站，GitHub page 想必是比较简单和省钱的方案之一，\n新建仓库，注意要求以username.github.io为名 访问username.github.io观察是否完成 hexo构建网站 Hexo 是一个快速、简洁且高效的博客框架。 前置要求：Node.js , git 进入网页直接下载即可 hexo下载 npm install -g hexo-cli 新建网站文件，这个文件就是网站的主体\nhexo init \u0026lt;floder\u0026gt; cd \u0026lt;floder\u0026gt; npm install\r会得到文件夹结构如下：\n.\r├── _config.yml 配置文件\r├── package.json 下载的应用程序配置文件\r├── scaffolds 模板文件（在obsidian配置中有用）\r├── source 主要改动文件，写blog类的都在这里\r| ├── _drafts 草稿\r| └── _posts 推文（？），网站上显示的文章内容\r└── themes 存放hexo的theme相关文件\r重要的命令 新建网站hexo init [floder] 新建文章hexo new [layout] \u0026lt;title\u0026gt; layout 路径 简单说明 post source/_posts 网站上访问的推文 page source 导航栏上的各种标签 draft source/_dragt 草稿 生成总体文件（编辑blog需经过这一步）hexo generate,常用hexo g -d直接部署 发布草稿hexo publish [layout] \u0026lt;filename\u0026gt; 本地测试网站效果hexo server,然后访问http://localhost:4000/在浏览器观察效果 清除缓存文件，清理文件hexo clean可以很快清理网站文件夹 当你想要写一篇博客时主要步骤如下： hexo i my_blog heox n post 一篇博客 写blog (测试:hexo server) hexo g -d\r使用hexo-server前 npm install hexo-server --save\n","date":"2025-04-04","id":1,"permalink":"www.whale4blog.cn/docs/hexo%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/","summary":"\u003ch2 id=\"github-page部署网站\"\u003eGitHub page部署网站\u003c/h2\u003e\n\u003cp\u003e部署blog网站，GitHub page 想必是比较简单和省钱的方案之一，\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e新建仓库，注意要求以\u003ccode\u003eusername.github.io\u003c/code\u003e为名\u003c/li\u003e\n\u003cli\u003e访问\u003ccode\u003eusername.github.io\u003c/code\u003e观察是否完成\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"hexo构建网站\"\u003ehexo构建网站\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://hexo.io/zh-cn/docs/\"\u003eHexo\u003c/a\u003e 是一个快速、简洁且高效的博客框架。\n前置要求：\u003ca href=\"https://nodejs.org/zh-cn\"\u003eNode.js\u003c/a\u003e , \u003ca href=\"https://git-scm.com/\"\u003egit\u003c/a\u003e\n进入网页直接下载即可\nhexo下载\n\u003ccode\u003enpm install -g hexo-cli\u003c/code\u003e\n新建网站文件，这个文件就是网站的主体\u003c/p\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame is-terminal not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ehexo init \u0026lt;floder\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e \u0026lt;floder\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003enpm install\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003e会得到文件夹结构如下：\u003c/p\u003e","tags":[],"title":"网站搭建"},{"content":"部署网站 首先下载插件 npm install hexo-deployer-git --save 然后对_config.yml进行编辑（ctrl+f查询deloy） 示例：\ndeploy: type: git repo: \u0026lt;repository url\u0026gt; #https://github.com/yourname/yourname.github.io branch: main token:\rtoken来源： 访问https://github.com/settings/tokens\n![[Pasted image 20250214235739.png]] 右下角Generate new token(classic) 得到token后复制得到一长串复制进上面 完成后就可以通过hexo g -d一键完成网站部署\ntheme选择 hexo的主题多样，可以在[[themes]]上寻找喜欢的主题 这里以NexT示例: 安装:\ncd my_blog npm install hexo-theme-next\rNexT的主题有四个风格选项\nmuse mist pisces gemini 可以在_config.yml中修改theme: next来修改主题风格 如此你就得到了一个美观的博客网站 自定义域名代理设置 国内访问github page往往速度慢甚至无法访问，而访问username.github.io似乎比较复杂，如果想要一个酷炫的网站名，可以跟着下面步骤来：\n购买域名 可以在各种卖域名网站进行购买，这里不做推荐，一个域名往往价格不是很高，大可以选一个便宜有意思的来作为网站域名。\n在阿里云购买 进入阿里云网站登录，大家都有支付宝什么的十分方便，左上角菜单进入域名界面， ![[Pasted image 20250215001947.png]] 推荐可以怪一点，价格更加低廉 注册后需要实名认证的步骤不做赘叙，这里可能需要等待一段时间\nCloudfare 代理设置 Cloudfare胜在免费(追重要的一点)，在国内不挂梯子可以以相对较好的速度访问网站\n注册 新建域，使用你购买的域名 左侧DNS设置 增加记录 ![[Pasted image 20250215002724.png]] 下面四个A类型和CNAME写上，内容如上，IP地址是github.io的地址，域名根据自己的进行修改 把下面的NS ![[Pasted image 20250215003322.png]] 复制到（不同运营商可能不一样） ![[Pasted image 20250215003623.png]] 测试： dig yourweb.cn +noall +answer\r得到ip不是原先设置的ip地址说明代理成功\ngithub最后设置 在网站仓库最右边的setting中的Pages中Custom domain中 ![[Pasted image 20250215004047.png]] save后一段时间后完成网站部署的全部步骤\n","date":"2025-04-04","id":2,"permalink":"www.whale4blog.cn/docs/hexo%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/%E7%BD%91%E7%AB%99%E9%83%A8%E7%BD%B2/","summary":"\u003ch3 id=\"部署网站\"\u003e部署网站\u003c/h3\u003e\n\u003cp\u003e首先下载插件\n\u003ccode\u003enpm install hexo-deployer-git --save\u003c/code\u003e\n然后对_config.yml进行编辑（\u003ccode\u003ectrl+f\u003c/code\u003e查询\u003ccode\u003edeloy\u003c/code\u003e）\n示例：\u003c/p\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-yml\" data-lang=\"yml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nt\"\u003edeploy\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"nt\"\u003etype\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003egit\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"nt\"\u003erepo\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003e\u0026lt;repository url\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"c\"\u003e#https://github.com/yourname/yourname.github.io\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"nt\"\u003ebranch\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003emain\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"l\"\u003etoken:\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003e\u003cstrong\u003etoken来源：\u003c/strong\u003e\n访问\u003ca href=\"https://github.com/settings/tokens\"\u003ehttps://github.com/settings/tokens\u003c/a\u003e\u003c/p\u003e","tags":[],"title":"网站部署"},{"content":"obsidian简化blog书写 书写blog使用markdown语言，markdown是一个十分简单的排版语言 查询https://markdown.com.cn/学习语法教程 但是在vscdoe中写markdown有些怪怪的，typora之类的更适合单个markdown的书写，使用obsidian可以很好的实现一个blog网站的长时间持续性的blog书写\n下载obsidian 访问https://obsidian.md/download下载obsidian 使用obsidian打开my_blog文件夹 设置中的忽略文件中除了source之外的都加入忽略文件中防止跑进关系图谱里 ![[Pasted image 20250215004955.png]] 4. 修改模板文件夹位置 ![[Pasted image 20250215005238.png]] 5. 第三方插件中安装Commander，Shell commands(可选) 相关设置举例： ![[Pasted image 20250215005352.png]] ![[Pasted image 20250215005406.png]] 这样可以简洁地实现在左侧快捷地发布文章和清理文件 6. blog书写 在blog中可以简单地新建文件，左侧栏中地插入模板选项后将文件移入source/_posts中完成书写\n结语 上面是十分简单地blog网站与书写方案，还有许多有趣地框架和项目来帮助你书写blog，搭建网站，你也可以从零开始实现一个blog网站。不过，我始终相信书写才是第一位的，即不断地书写才能不断地创造，实现，发展。在ai取代人类的话题中，保持创造的人是无法被取代的。\n","date":"2025-04-04","id":3,"permalink":"www.whale4blog.cn/docs/hexo%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/obsidian%E8%BE%85%E5%8A%A9%E4%B9%A6%E5%86%99/","summary":"\u003ch2 id=\"obsidian简化blog书写\"\u003eobsidian简化blog书写\u003c/h2\u003e\n\u003cp\u003e书写blog使用markdown语言，markdown是一个十分简单的排版语言\n查询\u003ca href=\"https://markdown.com.cn/\"\u003ehttps://markdown.com.cn/\u003c/a\u003e学习语法教程\n但是在vscdoe中写markdown有些怪怪的，typora之类的更适合单个markdown的书写，使用obsidian可以很好的实现一个blog网站的长时间持续性的blog书写\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e下载obsidian\n访问\u003ca href=\"https://obsidian.md/download\"\u003ehttps://obsidian.md/download\u003c/a\u003e下载obsidian\u003c/li\u003e\n\u003cli\u003e使用obsidian打开my_blog文件夹\u003c/li\u003e\n\u003cli\u003e设置中的忽略文件中除了source之外的都加入忽略文件中防止跑进关系图谱里\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e![[Pasted image 20250215004955.png]]\n4. 修改模板文件夹位置\n![[Pasted image 20250215005238.png]]\n5. 第三方插件中安装Commander，Shell commands(可选)\n相关设置举例：\n![[Pasted image 20250215005352.png]]\n![[Pasted image 20250215005406.png]]\n这样可以简洁地实现在左侧快捷地发布文章和清理文件\n6. blog书写\n在blog中可以简单地新建文件，左侧栏中地插入模板选项后将文件移入source/_posts中完成书写\u003c/p\u003e","tags":[],"title":"Obsidian辅助书写"},{"content":"","date":"2023-09-07","id":4,"permalink":"www.whale4blog.cn/blog/","summary":"","tags":[],"title":"Blog"},{"content":"前前言 在配置完lazyvim，更新后报错，加上lazyvim的各种配置不是很对我胃口于是转向自己配置一个nvim，在lazy.nvim进行插件管理后发现配置一个nvim比你想象的简单，同时也可一个个人定制化的代码工具。\nWhy nivm? 一开始见到vim的时候觉得各种操作，什么hjkl控制移动，什么normal、insert、visual模式，只觉得麻烦和反人类。但是因为课程原因，强调命令行使用和操作的时候频繁的键盘鼠标切换让我难以专注，但是nvim的使用却更加舒服，而在不熟练时对于小项目的开发也非常舒服，而nvim在代码编辑这一操作上确实方便很多，转回各种文本编辑环境的时候还有些不适应。\n当然各种ide也有相应的快捷键，但是当面对无数个ctrl+who时\n你的名字是？\n这时候就会佩服vim切换模式编辑这一设计的高明之处——提供统一连续的操作逻辑，编辑时就编辑，操作时就操作，选择时就选择，明确同时减少中断，而相应的体验会在使用的越熟练时更加舒服。\nStart from installration 访问neovim官网下载nvimhttps://neovim.io/\n也可以在仓库release界面下载https://github.com/neovim/neovim/releases\n有了nvim还不够，nvim具有强大丰富的社区和插件，这就有各种不同的插件管理方案，我选择了lazy.nvim，和lazyvim不同，lazy.nvim不是一个nvim的发行版，不是一个开包即用的nvim，而是一个新兴的插件管理器，官网下载https://lazy.folke.io/installation\nRequirements\nNeovim \u0026gt;= 0.8.0 (needs to be built with LuaJIT) Git \u0026gt;= 2.19.0 (for partial clones support) 这时候可以开始配置了！\n你也可以参考youtube上的教学视频，十分详细，对配置过程十分详细，也有对使用的说明，非常值得参考！https://youtu.be/6pAG3BHurdM\nHow to config nvim? 要知道如何配置，首先要知道配置逻辑，是点击安装按钮安装，还是在对应配置文件下添加代码，还是在文件夹中粘贴配置文件，安装nvim后，配置文件夹可能没有自动创建，下面让我们来手动操作：\nFor Linux/Macos\n新建.config/nvim文件\nFor windows\n新建$env:LOCALAPPDATA\\nvim也就是C:\\Users\\Yourself\\AppData\\Local\\nvim\n之后的操作对于不同系统都是一样的，这同样意味着你配置一次后可以非常方便的在其他系统使用同样的配置文件（可能有的地方需要修改）\n在这个文件夹下构建下面的结构\n| init.lua +---lua //核心配置文件夹 +---config //除插件外的配置文件 | colorscheme.lua //主题配置 | keymaps.lua //键位设置 | lazy.lua //lazy.nvim管理插件 | options.lua //全局配置 | \\---plugins //插件配置文件 | \\---lsp //lsp配置(先不用管)\r像上面创建文件及文件夹后我们进入下一步配置\nOverall Configration in config 在配置插件文件之前，我们先了解config中的各个配置文件并进行配置，而你已经发现我们配置nvim使用的是lua语言，放心即使不会lua也可以实现完整的配置，因为lua是和python一样易读方便，而且也基本不需要确切的语法知识。\n你可以阅读来learn Lua in Y minutes先了解lua语言\ninit.lua init.lua可以差不多视作neovim配置的中枢，在其他配置文件的内容都在init.lua中整合，使用如下语法\nrequire(\u0026#34;config.options\u0026#34;) require(\u0026#34;config.keymaps\u0026#34;) require(\u0026#34;config.lazy\u0026#34;)\r在option.lua,keymaps.lua,lazy.lua中的配置只有在init.lua整合后才会发挥作用\n而繁多插件因为我们使用了lazy.nvim管理插件，其配置都在lazy.lua中进行配置\noptions.lua 这个文件中放置nvim的各种配置\nlocal opt = vim.opt -- Hint: use `:h \u0026lt;option\u0026gt;` to figure out the meaning if needed opt.clipboard = \u0026#34;unnamedplus\u0026#34; -- use system clipboard opt.completeopt = { \u0026#34;menu\u0026#34;, \u0026#34;menuone\u0026#34;, \u0026#34;noselect\u0026#34; } opt.mouse = \u0026#34;a\u0026#34; -- allow the mouse to be used in Nvim -- Tab opt.autoindent = true opt.tabstop = 4 -- number of visual spaces per TAB opt.softtabstop = 4 -- number of spacesin tab when editing opt.shiftwidth = 4 -- insert 4 spaces on a tab opt.expandtab = true -- tabs are spaces, mainly because of python -- UI config opt.number = true -- show absolute number opt.relativenumber = true -- add numbers to each line on the left side opt.cursorline = true -- highlight cursor line underneath the cursor horizontally opt.splitbelow = true -- open new vertical split bottom opt.splitright = true -- open new horizontal splits right opt.termguicolors = true -- enabl 24-bit RGB color in the TUI opt.showmode = false -- we are experienced, wo don\u0026#39;t need the \u0026#34;-- INSERT --\u0026#34; mode hint opt.signcolumn = \u0026#34;yes\u0026#34; -- always show sign column -- Searching opt.incsearch = true -- search as characters are entered opt.hlsearch = false -- do not highlight matches opt.ignorecase = true -- ignore case in searches by default opt.smartcase = true -- but make it case sensitive if an uppercase is entered\r这些配置是相对总体的配置，比如对Tab对窗口的配置等，对UI的配置，因为很多内容都在插件中有直接的配置，所以这里的配置需求不是很多\nkeymap.lua 通过调整默认快捷键来得到更加舒服的编程体验\n-- define common options local opts = { noremap = true, -- non-recursive silent = true, -- do not show message } vim.g.mapleader = \u0026#34; \u0026#34; -- set leader to space local keymap = vim.keymap ----------------- -- Insert mode -- ----------------- keymap.set(\u0026#34;i\u0026#34;, \u0026#34;jk\u0026#34;, \u0026#34;\u0026lt;Esc\u0026gt;\u0026#34;, opts) -- jk to escape ----------------- -- Normal mode -- ----------------- -- switch $ to 9 keymap.set(\u0026#34;n\u0026#34;, \u0026#34;9\u0026#34;, \u0026#34;$\u0026#34;, opts) -- Hint: see `:h vim.map.set()` -- Better window navigation keymap.set(\u0026#34;n\u0026#34;, \u0026#34;\u0026lt;C-h\u0026gt;\u0026#34;, \u0026#34;\u0026lt;C-w\u0026gt;h\u0026#34;, opts) keymap.set(\u0026#34;n\u0026#34;, \u0026#34;\u0026lt;C-j\u0026gt;\u0026#34;, \u0026#34;\u0026lt;C-w\u0026gt;j\u0026#34;, opts) keymap.set(\u0026#34;n\u0026#34;, \u0026#34;\u0026lt;C-k\u0026gt;\u0026#34;, \u0026#34;\u0026lt;C-w\u0026gt;k\u0026#34;, opts) keymap.set(\u0026#34;n\u0026#34;, \u0026#34;\u0026lt;C-l\u0026gt;\u0026#34;, \u0026#34;\u0026lt;C-w\u0026gt;l\u0026#34;, opts) keymap.set(\u0026#34;n\u0026#34;, \u0026#34;\u0026lt;leader\u0026gt;sv\u0026#34;, \u0026#34;\u0026lt;C-w\u0026gt;v\u0026#34;, opts) -- split window vertically keymap.set(\u0026#34;n\u0026#34;, \u0026#34;\u0026lt;leader\u0026gt;sh\u0026#34;, \u0026#34;\u0026lt;C-w\u0026gt;s\u0026#34;, opts) -- split window horizontally -- Better buffer navigation keymap.set(\u0026#34;n\u0026#34;, \u0026#34;\u0026lt;leader\u0026gt;bn\u0026#34;, \u0026#34;:BufferLineCycleNext\u0026lt;CR\u0026gt;\u0026#34;, opts) -- next buffer keymap.set(\u0026#34;n\u0026#34;, \u0026#34;\u0026lt;leader\u0026gt;bp\u0026#34;, \u0026#34;:BufferLineCyclePrev\u0026lt;CR\u0026gt;\u0026#34;, opts) -- previous buffer keymap.set(\u0026#34;n\u0026#34;, \u0026#34;\u0026lt;leader\u0026gt;bd\u0026#34;, \u0026#34;:BufferLineCloseLeft\u0026lt;CR\u0026gt;\u0026#34;, opts) -- close buffer --取消高亮 keymap.set(\u0026#34;n\u0026#34;, \u0026#34;\u0026lt;leader\u0026gt;nh\u0026#34;, \u0026#34;:nohl\u0026lt;CR\u0026gt;\u0026#34;, opts) -- Resize with arrows -- delta: 2 lines keymap.set(\u0026#34;n\u0026#34;, \u0026#34;\u0026lt;C-Up\u0026gt;\u0026#34;, \u0026#34;:resize -2\u0026lt;CR\u0026gt;\u0026#34;, opts) keymap.set(\u0026#34;n\u0026#34;, \u0026#34;\u0026lt;C-Down\u0026gt;\u0026#34;, \u0026#34;:resize +2\u0026lt;CR\u0026gt;\u0026#34;, opts) keymap.set(\u0026#34;n\u0026#34;, \u0026#34;\u0026lt;C-Left\u0026gt;\u0026#34;, \u0026#34;:vertical resize -2\u0026lt;CR\u0026gt;\u0026#34;, opts) keymap.set(\u0026#34;n\u0026#34;, \u0026#34;\u0026lt;C-Right\u0026gt;\u0026#34;, \u0026#34;:vertical resize +2\u0026lt;CR\u0026gt;\u0026#34;, opts) keymap.set(\u0026#34;n\u0026#34;, \u0026#34;\u0026lt;leader\u0026gt;wd\u0026#34;, \u0026#34;\u0026lt;cmd\u0026gt;close\u0026lt;CR\u0026gt;\u0026#34;, { desc = \u0026#34;Close current split\u0026#34; }) -- close current split window ------------------- --plugin\u0026#39;s keymap-- ------------------- -- Treesitter context vim.keymap.set(\u0026#34;n\u0026#34;, \u0026#34;[c\u0026#34;, function() require(\u0026#34;treesitter-context\u0026#34;).go_to_context(vim.v.count1) end, opts) --- go to previous context ----------------- -- Visual mode -- ----------------- -- Hint: start visual mode with the same area as the previous area and the same mode keymap.set(\u0026#34;v\u0026#34;, \u0026#34;\u0026lt;\u0026#34;, \u0026#34;\u0026lt;gv\u0026#34;, opts) keymap.set(\u0026#34;v\u0026#34;, \u0026#34;\u0026gt;\u0026#34;, \u0026#34;\u0026gt;gv\u0026#34;, opts) keymap.set(\u0026#34;v\u0026#34;, \u0026#34;J\u0026#34;, \u0026#34;:m \u0026#39;\u0026gt;+1\u0026lt;CR\u0026gt;gv=gv\u0026#34;, opts) keymap.set(\u0026#34;v\u0026#34;, \u0026#34;K\u0026#34;, \u0026#34;:m \u0026#39;\u0026lt;-2\u0026lt;CR\u0026gt;gv=gv\u0026#34;, opts) ----------------- ---Visual Blok -- ----------------- keymap.set(\u0026#34;x\u0026#34;, \u0026#34;I\u0026#34;, \u0026#34;I\u0026#34;, opts) -- 确保 Shift + I 正常工作\r其中keymap.set(\u0026quot;i\u0026quot;, \u0026quot;jk\u0026quot;, \u0026quot;\u0026lt;Esc\u0026gt;\u0026quot;, opts) -- jk to escape比较推荐，毕竟频繁使用遥远的esc对小指很不友好，而两种模式的切换是十分频繁，所以使用jk双键来替代esc。\n其中plugin的配置可以等对应插件配置完成后再进行配置\n其他的配置可以自己尝试不做赘述。\n其中主要修改spec和colorscheme的内容，其中\n-- Bootstrap lazy.nvim --https://youtu.be/6pAG3BHurdM local lazypath = vim.fn.stdpath(\u0026#34;data\u0026#34;) .. \u0026#34;/lazy/lazy.nvim\u0026#34; if not (vim.uv or vim.loop).fs_stat(lazypath) then local lazyrepo = \u0026#34;https://github.com/folke/lazy.nvim.git\u0026#34; local out = vim.fn.system({ \u0026#34;git\u0026#34;, \u0026#34;clone\u0026#34;, \u0026#34;--filter=blob:none\u0026#34;, \u0026#34;--branch=stable\u0026#34;, lazyrepo, lazypath }) if vim.v.shell_error ~= 0 then vim.api.nvim_echo({ { \u0026#34;Failed to clone lazy.nvim:\\n\u0026#34;, \u0026#34;ErrorMsg\u0026#34; }, { out, \u0026#34;WarningMsg\u0026#34; }, { \u0026#34;\\nPress any key to exit...\u0026#34; }, }, true, {}) vim.fn.getchar() os.exit(1) end end vim.opt.rtp:prepend(lazypath) -- Make sure to setup `mapleader` and `maplocalleader` before -- loading lazy.nvim so that mappings are correct. -- This is also a good place to setup other settings (vim.opt) vim.g.mapleader = \u0026#34; \u0026#34; vim.g.maplocalleader = \u0026#34;\\\\\u0026#34; -- 设置for Neovide if vim.g.neovide then -- 字体 vim.o.guifont = \u0026#34;FiraCode Nerd Font Mono:h11\u0026#34; -- 透明 -- vim.g.neovide_opacity = 0.9 -- vim.g.neovide_normal_opacity = 0.9 -- 窗口颜色 vim.g.neovide_title_background_color = \u0026#34;#282828\u0026#34; -- string.format(\u0026#34;%x\u0026#34;, vim.api.nvim_get_hl(0, { id = vim.api.nvim_get_hl_id_by_name(\u0026#34;Normal\u0026#34;) }).bg) vim.g.neovide_title_text_color = \u0026#34;#ebdbb2\u0026#34; -- 无空闲 vim.g.neovide_no_idle = true -- 记住窗口大小 vim.g.neovide_remember_window_size = true vim.g.neovide_cursor_vfx_mode = \u0026#34;wireframe\u0026#34; end -- Setup lazy.nvim require(\u0026#34;lazy\u0026#34;).setup({ spec = { -- import your plugins { import = \u0026#34;plugins\u0026#34; }, { import = \u0026#34;config.colorscheme\u0026#34; }, { import = \u0026#34;plugins.lsp\u0026#34; }, --{import = \u0026#34;plugins.nvim-treesitter\u0026#34;}, --{import = \u0026#34;plugins.nvim-treesitter-context\u0026#34;}, --{import = \u0026#34;plugins.lsp.mason\u0026#34;}, --{import = \u0026#34;plugins.lsp.lspconfig\u0026#34;}, --{import = \u0026#34;plugins.telescope\u0026#34;}, --{import = \u0026#34;plugins.nvim-cmp\u0026#34;}, }, opt = { colorscheme = \u0026#34;gruvbox\u0026#34; }, -- Configure any other settings here. See the documentation for more details. -- colorscheme that will be used when installing plugins. install = { colorscheme = { \u0026#34;gruvbox\u0026#34; } }, -- automatically check for plugin updates checker = { enabled = true }, })\r其中主要修改spec和colorscheme的内容\nspec = { -- import your plugins { import = \u0026#34;plugins\u0026#34; }, { import = \u0026#34;config.colorscheme\u0026#34;}, { import = \u0026#34;plugins.lsp\u0026#34;} },\r就是指明配置的插件的位置，即是插件配置文件的放置处，colorscheme是主题的指明，而插件的安装只需要再plugins中放置插件配置再启动nvim就会自动安装\n主题配置 return { { \u0026#34;nyoom-engineering/oxocarbon.nvim\u0026#34;, -- Add in any other configuration; -- event = foo, -- config = bar -- end, config = function() vim.cmd.colorscheme(\u0026#34;oxocarbon\u0026#34;) -- 透明背景 --vim.api.nvim_set_hl(0, \u0026#34;Normal\u0026#34;, { bg = \u0026#34;none\u0026#34; }) --vim.api.nvim_set_hl(0, \u0026#34;NormalFloat\u0026#34;, { bg = \u0026#34;none\u0026#34; }) --vim.api.nvim_set_hl(0, \u0026#34;NormalNC\u0026#34;, { bg = \u0026#34;none\u0026#34; }) end }, }\r这就是lazy.nvim配置文件的配置框架\nreturn { \u0026#34;插件的仓库名\u0026#34;, --下面可以没有 config = function() ... --配置设置 end }\r你可以在colorscheme.lua中添加其他的其他的主题配置\n而添加其他插件可以访问对应插件的仓库，下面一般会有配置的说明，如果没有直接写出lazy.nvim插件的配置，但是都可以直接转换成上面格式直接使用。\n插件列表 lsp配置 lsp定义是“The Language Server Protocol (LSP) defines the protocol used between an editor or IDE and a language server that provides language features like auto complete, go to definition, find all references etc.（语言服务器协议（LSP）定义了编辑器或IDE与语言服务器之间使用的协议，该协议提供了自动完成，转到定义，查找所有引用等语言功能。）”\n其实就是为vim提供“自动完成，转到定义，查找所有引用等语言功能”，就是像vscode配置各种语言相同的功能，我们使用Mason来lsp管理\nmason.lua配置 lspconfig.lua配置 两个配置都要有\nreturn { \u0026#34;williamboman/mason.nvim\u0026#34;, dependencies = { \u0026#34;williamboman/mason-lspconfig.nvim\u0026#34;, \u0026#34;WhoIsSethDaniel/mason-tool-installer.nvim\u0026#34;, }, config = function() -- import mason local mason = require(\u0026#34;mason\u0026#34;) -- import mason-lspconfig local mason_lspconfig = require(\u0026#34;mason-lspconfig\u0026#34;) local mason_tool_installer = require(\u0026#34;mason-tool-installer\u0026#34;) -- enable mason and configure icons mason.setup({ ui = { icons = { package_installed = \u0026#34;✓\u0026#34;, package_pending = \u0026#34;➜\u0026#34;, package_uninstalled = \u0026#34;✗\u0026#34;, }, }, }) mason_lspconfig.setup({ ensure_installed = { \u0026#34;ruff\u0026#34;, \u0026#34;rust_analyzer\u0026#34;, \u0026#34;clangd\u0026#34;, \u0026#34;lua_ls\u0026#34;, }, }) mason_tool_installer.setup({ ensure_installed = { \u0026#34;stylua\u0026#34;, \u0026#34;prettier\u0026#34;, \u0026#34;isort\u0026#34;, \u0026#34;flake8\u0026#34;, \u0026#34;black\u0026#34;, \u0026#34;clang-format\u0026#34;, \u0026#34;cpplint\u0026#34;, }, }) end, }\r下面lspconfig配置\nreturn { \u0026#34;neovim/nvim-lspconfig\u0026#34;, event = { \u0026#34;BufReadPre\u0026#34;, \u0026#34;BufNewFile\u0026#34; }, dependencies = { \u0026#34;hrsh7th/cmp-nvim-lsp\u0026#34;, { \u0026#34;antosha417/nvim-lsp-file-operations\u0026#34;, config = true }, { \u0026#34;folke/neodev.nvim\u0026#34;, opts = {} }, }, config = function() -- import lspconfig plugin local lspconfig = require(\u0026#34;lspconfig\u0026#34;) lspconfig.ruff.setup({ init_options = { settings = { -- Ruff language server settings go here enable = true, lint = { enabled = true, run = \u0026#34;onsave\u0026#34;, max_line_length = 120, }, format = { enabled = true, run = \u0026#34;onSave\u0026#34;, }, fix = { enabled = false, run = \u0026#34;onSave\u0026#34;, }, }, }, }) -- import mason_lspconfig plugin local mason_lspconfig = require(\u0026#34;mason-lspconfig\u0026#34;) -- import cmp-nvim-lsp plugin local cmp_nvim_lsp = require(\u0026#34;cmp_nvim_lsp\u0026#34;) local keymap = vim.keymap -- for conciseness vim.api.nvim_create_autocmd(\u0026#34;LspAttach\u0026#34;, { group = vim.api.nvim_create_augroup(\u0026#34;UserLspConfig\u0026#34;, {}), callback = function(ev) -- Buffer local mappings. -- See `:help vim.lsp.*` for documentation on any of the below functions local opts = { buffer = ev.buf, silent = true } local map = function(keys, func, desc) vim.keymap.set(\u0026#34;n\u0026#34;, keys, func, { buffer = ev.buf, desc = \u0026#34;LSP: \u0026#34; .. desc }) end opts.desc = \u0026#34;See available code actions\u0026#34; keymap.set({ \u0026#34;n\u0026#34;, \u0026#34;v\u0026#34; }, \u0026#34;\u0026lt;leader\u0026gt;ca\u0026#34;, vim.lsp.buf.code_action, opts) -- see available code actions, in visual mode will apply to selection opts.desc = \u0026#34;Smart rename\u0026#34; keymap.set(\u0026#34;n\u0026#34;, \u0026#34;\u0026lt;leader\u0026gt;rn\u0026#34;, vim.lsp.buf.rename, opts) -- smart rename opts.desc = \u0026#34;Show line diagnostics\u0026#34; keymap.set(\u0026#34;n\u0026#34;, \u0026#34;\u0026lt;leader\u0026gt;d\u0026#34;, vim.diagnostic.open_float, opts) -- show diagnostics for line opts.desc = \u0026#34;Go to previous diagnostic\u0026#34; keymap.set(\u0026#34;n\u0026#34;, \u0026#34;[d\u0026#34;, vim.diagnostic.goto_prev, opts) -- jump to previous diagnostic in buffer opts.desc = \u0026#34;Go to next diagnostic\u0026#34; keymap.set(\u0026#34;n\u0026#34;, \u0026#34;]d\u0026#34;, vim.diagnostic.goto_next, opts) -- jump to next diagnostic in buffer opts.desc = \u0026#34;Show documentation for what is under cursor\u0026#34; keymap.set(\u0026#34;n\u0026#34;, \u0026#34;K\u0026#34;, vim.lsp.buf.hover, opts) -- show documentation for what is under cursor opts.desc = \u0026#34;Restart LSP\u0026#34; keymap.set(\u0026#34;n\u0026#34;, \u0026#34;\u0026lt;leader\u0026gt;rs\u0026#34;, \u0026#34;:LspRestart\u0026lt;CR\u0026gt;\u0026#34;, opts) -- mapping to restart lsp if necessary end, }) -- used to enable autocompletion (assign to every lsp server config) local capabilities = cmp_nvim_lsp.default_capabilities() -- -- 设置各种服务器的配置 mason_lspconfig.setup_handlers({ -- default handler for installed servers function(server_name) lspconfig[server_name].setup({ capabilities = capabilities, }) end, [\u0026#34;lua_ls\u0026#34;] = function() -- configure lua server (with special settings) lspconfig[\u0026#34;lua_ls\u0026#34;].setup({ capabilities = capabilities, settings = { Lua = { -- make the language server recognize \u0026#34;vim\u0026#34; global diagnostics = { globals = { \u0026#34;vim\u0026#34; }, }, completion = { callSnippet = \u0026#34;Replace\u0026#34;, }, }, }, }) end, }) end, }\rensure_installed中的是安装的语言配置，重新打开nvim安装完成后:Mason会出现下面界面，可以直接在下面配置语言，安装语言，DAP是debug支持，Linter是错误显示，Formatter是格式化代码，移动到对应语言下I安装，X卸载，非常方便，但是rust似乎没有很好的支持，参考前面我的rust配置可以配置\n使用TODO ","date":"2025-04-04","id":5,"permalink":"www.whale4blog.cn/blog/%E6%89%93%E9%80%A0%E4%B8%93%E5%B1%9E%E4%BD%A0%E7%9A%84nvim%E9%85%8D%E7%BD%AE%E6%8C%87%E8%A5%BF/","summary":"\u003ch2 id=\"前前言\"\u003e前前言\u003c/h2\u003e\n\u003cp\u003e在配置完lazyvim，更新后报错，加上lazyvim的各种配置不是很对我胃口于是转向自己配置一个nvim，在lazy.nvim进行插件管理后发现配置一个nvim比你想象的简单，同时也可一个个人定制化的代码工具。\u003c/p\u003e\n\u003ch2 id=\"why-nivm\"\u003eWhy nivm?\u003c/h2\u003e\n\u003cp\u003e一开始见到vim的时候觉得各种操作，什么hjkl控制移动，什么normal、insert、visual模式，只觉得麻烦和反人类。但是因为课程原因，强调命令行使用和操作的时候频繁的键盘鼠标切换让我难以专注，但是nvim的使用却更加舒服，而在不熟练时对于小项目的开发也非常舒服，而nvim在代码编辑这一操作上确实方便很多，转回各种文本编辑环境的时候还有些不适应。\u003c/p\u003e\n\u003cp\u003e当然各种ide也有相应的快捷键，但是当面对无数个\u003ccode\u003ectrl+who\u003c/code\u003e时\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e你的名字是？\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e这时候就会佩服vim切换模式编辑这一设计的高明之处——提供统一连续的操作逻辑，编辑时就编辑，操作时就操作，选择时就选择，明确同时减少中断，而相应的体验会在使用的越熟练时更加舒服。\u003c/p\u003e\n\u003ch2 id=\"start-from-installration\"\u003eStart from installration\u003c/h2\u003e\n\u003cp\u003e访问neovim官网下载nvim\u003ca href=\"https://neovim.io/\"\u003ehttps://neovim.io/\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e也可以在仓库release界面下载https://github.com/neovim/neovim/releases\u003c/p\u003e\n\u003cp\u003e有了nvim还不够，nvim具有强大丰富的社区和插件，这就有各种不同的插件管理方案，我选择了lazy.nvim，和lazyvim不同，lazy.nvim不是一个nvim的发行版，不是一个开包即用的nvim，而是一个新兴的插件管理器，官网下载https://lazy.folke.io/installation\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eRequirements\u003ca href=\"https://lazy.folke.io/#%ef%b8%8f-requirements\"\u003e\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eNeovim \u0026gt;= \u003cstrong\u003e0.8.0\u003c/strong\u003e (needs to be built with \u003cstrong\u003eLuaJIT\u003c/strong\u003e)\u003c/li\u003e\n\u003cli\u003eGit \u0026gt;= \u003cstrong\u003e2.19.0\u003c/strong\u003e (for partial clones support)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e这时候可以开始配置了！\u003c/p\u003e","tags":[],"title":"打造专属你的nvim配置指西"},{"content":"","date":"2025-04-04","id":6,"permalink":"www.whale4blog.cn/docs/hexo%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/","summary":"","tags":[],"title":"Hexo网站搭建"},{"content":"Link to valuable, relevant resources.\n","date":"2024-02-27","id":7,"permalink":"www.whale4blog.cn/docs/resources/","summary":"\u003cp\u003eLink to valuable, relevant resources.\u003c/p\u003e","tags":[],"title":"Resources"},{"content":"","date":"2023-09-07","id":8,"permalink":"www.whale4blog.cn/docs/","summary":"","tags":[],"title":"Docs"},{"content":"","date":"2023-09-07","id":9,"permalink":"www.whale4blog.cn/privacy/","summary":"","tags":[],"title":"Privacy Policy"},{"content":"","date":"2023-09-07","id":10,"permalink":"www.whale4blog.cn/","summary":"","tags":[],"title":"Whale4Blog"},{"content":"","date":"0001-01-01","id":11,"permalink":"www.whale4blog.cn/categories/","summary":"","tags":[],"title":"Categories"},{"content":"","date":"0001-01-01","id":12,"permalink":"www.whale4blog.cn/contributors/","summary":"","tags":[],"title":"Contributors"},{"content":"","date":"0001-01-01","id":13,"permalink":"www.whale4blog.cn/tags/","summary":"","tags":[],"title":"Tags"}]